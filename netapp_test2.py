# -*- coding: utf-8 -*-
"""NetApp_test2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RdCtTW9U88euneHJcg1wDsNeJef1DfJS
"""

# from google.colab import drive
# drive.mount('/content/drive/')
# #!unzip starting_k.zip

# !unzip /content/drive/My\ Drive/NetApp/FIRE2017-IRLeD-track-data.zip -d /content/fire2017data

# !pip install LexNLP

# import lexnlp.extract.en.dates
# import lexnlp.extract.en.citations
import regex as re
import nltk
nltk.download('averaged_perceptron_tagger')
nltk.download('punkt')

"""Retrieve date of case

*   Filter
"""

# def all_dates(lines):
#   return (list(lexnlp.extract.en.dates.get_dates(lines)))

def date_check(line):
  words=line.split()
  length=len(line.split())
  word=words[length-3]
  words[length-3]=word[1:]
  word=words[length-1]
  words[length-1]=word[:-1]
  return (words[length-3]+' '+words[length-2]+' '+words[length-1])
def retrieve_firstdate(filename):
  # filename='0001'
  if(filename=="No more Files"):
    return "-1"
  start='Prior_Cases/'
  f=open(start+filename,'r')
  lines = f.read()
  # alldates=all_dates(lines)   #first date gives the date of case
  # return alldates[0]
  line=lines.splitlines()
  return date_check(line[0])


"""Retrieve Citatation line
*   Not Filter
"""

def all_citations(lines):
  return (list(lexnlp.extract.en.citations.get_citations(lines)))
#
def citation_check(lines):
  lines2=lines.splitlines()
  String='CITATION:'
  for x in lines2:
    ResSearch = re.search(String, x)
    if ResSearch:
      return (re.sub(r'^\W*\w+\W*', '', x))
  return None

def retrieve_citation(filename):
  # filename='0001'
  start='/content/fire2017data/FIRE2017-IRLeD-track-data/Task_2/Prior_Cases/prior_case_'
  f=open(start+filename+'.txt','r')
  lines = f.read()
  # citations=all_citations(lines)      #doesn't extract it
  return citation_check(lines)

"""Retrieve all the information under Held
*   Not Filter
"""

def held_check(lines):
  lines2=lines.splitlines()
  flag=0
  String='HELD :'
  for x in lines2:
    ResSearch = re.search(String, x)
    if (ResSearch and flag==0):
      held = (re.sub(r'^\W*\w+\W*', '', x))
      flag = 1
      String = ' : '
    elif (ResSearch and flag==1):
      return held
    elif (flag==1):
      held = held + '\n' + x
  return None

def retrieve_held(filename):
  # filename='0001'
  start='/content/fire2017data/FIRE2017-IRLeD-track-data/Task_2/Prior_Cases/prior_case_'
  f=open(start+filename+'.txt','r')
  lines = f.read()
  return held_check(lines)

"""If there is an appellate jurisdiction, return whether it is a civil or criminal appellate jurisdiction
*   Filter
"""

def aj_check(lines):
  lines2=lines.splitlines()
  flag=0
  for line in lines2:
    if(flag==1):
      # str1= str1+' '+line
      match=re.search(r'\d+', line)
      return str1 , match.group()
    String='CIVIL APPELLATE JURISDICTION'
    ResSearch = re.search(String, line)
    # if ResSearch is None:
    #   String='CIVIL APPELLATE JURISDICTION:'
    #   ResSearch = re.search(String, line)
    if ResSearch:
      str1=line.split()
      str1=str1[4:]
      str1=' '.join(str1)
      if(bool(re.search(r'\d', str1))):
        match=re.search(r'\d+', str1)
        return "CIVIL", match.group()
      else:
        str="CIVIL"
        flag=1
    else:
      String='CRIMINAL APPELLATE JURISDICTION'
      ResSearch = re.search(String, line)
      # if ResSearch is None:
      #   String='CRIMINAL APPELLATE JURISDICTION:'
      #   ResSearch = re.search(String, line)
      if ResSearch:
        str1=line.split()
        str1=str1[4:]
        str1=' '.join(str1)
        if(bool(re.search(r'\d', str1))):
          match=re.search(r'\d+', str1)
          return "CRIMINAL", match.group()
        else:
          str1="CRIMINAL"
          flag=1
    
  return None,None

def retrieve_AppellateJurisdiction(filename):
  if(filename=="No more Files"):
    return "-1","-1"
  # filename='0001'
  start='Prior_Cases/'
  f=open(start+filename,'r')
  lines = f.read()
  appellate_jurisdiction, appeal_no = aj_check(lines)
  return appellate_jurisdiction, appeal_no

"""Retrieve everything under the heading 'CITATOR'
*   Will probably change this to make it more specific
*   Not Filter yet
"""

def citatorInfo_check(lines):
  lines2=lines.splitlines()
  flag=0
  String='CITATOR INFO :'
  for x in lines2:
    ResSearch = re.search(String, x)
    if (ResSearch and flag==0):
      str1=x.split()
      str1=str1[3:]
      cinfo=' '.join(str1)
      flag = 1
      String = ' : '
    elif (ResSearch and flag==1):
      return cinfo
    elif (flag==1):
      cinfo = cinfo + '\n' + x
  return None

def retrieve_citatorInfo(filename):
  # filename='0001'
  start='/content/fire2017data/FIRE2017-IRLeD-track-data/Task_2/Prior_Cases/prior_case_'
  f=open(start+filename+'.txt','r')
  lines = f.read()
  return citatorInfo_check(lines)

"""If there was an appeal, check whether it was allowed or dismissed
*   Filter
"""
def appeal_allowedOrDismissed(lines):
  lines2=lines.splitlines()
  for i in range(0,len(lines2)):
    lines2[i]= lines2[i].lower()
  for line in range((len(lines2)-1),-1,-1):
    String='appeal'
    ResSearch = re.search(String, lines2[line])
    if (ResSearch):
      if(re.search('allowed', lines2[line])):
        return 'allowed'
      elif(re.search('dismissed', lines2[line])):
        return 'dismissed'

def retrieve_appealAllowedOrDismissed(filename):
  # filename='0001'
  start='/content/fire2017data/FIRE2017-IRLeD-track-data/Task_2/Prior_Cases/prior_case_'
  f=open(start+filename+'.txt','r')
  lines = f.read()
  return appeal_allowedOrDismissed(lines)

"""Retrieve the name of the judge
*   Filter
"""

def judge_check(lines):
  match = re.search(r'Judgment of the Court was delivered by (\S+)', lines)
  if match:
      judge = match.group(1)
      judge = re.sub(r'[^\w\s]','',judge)
      return format(judge)

def retrieve_judge(filename):
  # filename='0001'
  start='/content/fire2017data/FIRE2017-IRLeD-track-data/Task_2/Prior_Cases/prior_case_'
  f=open(start+filename+'.txt','r')
  lines = f.read()
  return judge_check(lines)

"""Retrieve the names of the appellants
*   Filter
"""

def appellant_check(lines):
  lines2=lines.splitlines()
  ResSearch=0
  appellant=[]
  for line in lines2:
    # String='for appellant'    #check if this works for all
    # ResSearch = re.search(String, line)
    # if(ResSearch is None):
    #   String='for Appellant.'   #check if this works for all
    #   ResSearch = re.search(String, line)
    # if(ResSearch is None):
    #   String='for the appellant.'   #check if this works for all
    #   ResSearch = re.search(String, line)
    # if(ResSearch is None):
    #   String='for the Appellant.'   #check if this works for all
    #   ResSearch = re.search(String, line)
    if('for appellant.' in line):
      ResSearch = 1
    if('for Appellant.' in line):
      ResSearch = 1
    if('for the appellant.' in line):
      ResSearch = 1
    if('for the Appellant.' in line):
      ResSearch = 1
    if('for appellant No.' in line):
      ResSearch = 1
    if('for Appellant No.' in line):
      ResSearch = 1
    if('for the appellant No.' in line):
      ResSearch = 1
    if('for the Appellant No.' in line):
      ResSearch = 1
    if(ResSearch):
      ResSearch=0
      words=re.split(',', line)
      words2=re.split(' and ', words[-1])
      if words:
        words=words[:((len(words))-1)]
      else:
        continue
      for x in words2:
        words.append(x)
      words2=re.split(' for ', words[-1])
      
      if words:
        words=words[:((len(words))-1)]
      else:
        continue
      
      if words2[0]:
        words.append(words2[0])
      else:
        continue
      tagged=nltk.pos_tag(words)
      for i in range ( 0, len(tagged)):
        if(tagged[i][1]=='NNP'):
          appellant.append(tagged[i][0])
  if appellant:            
    return appellant
  else:
    return None

def retrieve_appellant(filename):
  # filename='0001'
  start='/content/fire2017data/FIRE2017-IRLeD-track-data/Task_2/Prior_Cases/prior_case_'
  f=open(start+filename+'.txt','r')
  lines = f.read()
  return appellant_check(lines)

"""Retrieve names of respondents
*   Filter
"""

# problems: 0015


def respondent_check(lines):
  lines2=lines.splitlines()
  respondent=[]
  ResSearch=0
  for line in lines2:
    # String='for respondent'     #check if this works for all
    # ResSearch = re.search(String, line)
    # if(ResSearch is None):
    #   String='for Respondent'      #check if this works for all
    #   ResSearch = re.search(String, line)
    # if(ResSearch is None):
    #   String='for the respondent'      #check if this works for all
    #   ResSearch = re.search(String, line)
    # if(ResSearch is None):
    #   String='for the Respondent'      #check if this works for all
    #   ResSearch = re.search(String, line)
    # if(ResSearch):
    #   words=re.split(',', line)
    #   tagged=nltk.pos_tag(words)
    if('for respondent.' in line):
      ResSearch = 1
    if('for Respondent.' in line):
      ResSearch = 1
    if('for the respondent.' in line):
      ResSearch = 1
    if('for the Respondent.' in line):
      ResSearch = 1
    if('for respondent No.' in line):
      ResSearch = 1
    if('for Respondent No.' in line):
      ResSearch = 1
    if('for the respondent No.' in line):
      ResSearch = 1
    if('for the Respondent No.' in line):
      ResSearch = 1
    if(ResSearch):
      ResSearch=0
      words=re.split(',', line)
      words2=re.split(' and ', words[-1])
      if words:
        words=words[:((len(words))-1)]
      else:
        continue
      for x in words2:
        words.append(x)
      words2=re.split(' for ', words[-1])
      
      if words:
        words=words[:((len(words))-1)]
      else:
        continue
      
      if words2[0]:
        words.append(words2[0])
      else:
        continue
      tagged=nltk.pos_tag(words)
      for i in range ( 0, len(words)):
        if(tagged[i][1]=='NNP'):
          respondent.append(tagged[i][0])
  if respondent:            
    return respondent
  else:
    return None

def retrieve_respondents(filename):
  # filename='0001'
  start='/content/fire2017data/FIRE2017-IRLeD-track-data/Task_2/Prior_Cases/prior_case_'
  f=open(start+filename+'.txt','r')
  lines = f.read()
  return respondent_check(lines)

"""Retrieve order as to costs line 
* Not a Filter
"""

# returning a line, check

def order_to_costs_check(lines):
  lines2=lines.splitlines()
  # for i in range(0,len(lines2)):
  #   lines2[i]= lines2[i].lower()
  for line in range((len(lines2)-1),-1,-1):
    String='order as to cost'
    ResSearch = re.search(String, lines2[line])
    if (ResSearch):
      ResSearch2 = nltk.tokenize.sent_tokenize(lines2[line])
      for i in range(0,len(ResSearch2)):
        ResSearch = re.search(String, ResSearch2[i])
        if(ResSearch):
          return ResSearch2[i]
  return None

def retrieve_orderAsToCosts(filename):
  # filename='0001'
  start='/content/fire2017data/FIRE2017-IRLeD-track-data/Task_2/Prior_Cases/prior_case_'
  f=open(start+filename+'.txt','r')
  lines = f.read()
  order_to_costs = order_to_costs_check(lines)
  return order_to_costs


def final_judgement(lines):
  lines2=lines.splitlines()
  return lines2[-3] + " " + lines2[-2]

def retrieve_finalJudgement(filename):
  # filename='0603'
  start='Prior_Cases/'
  f=open(start+filename+'.txt','r')
  lines = f.read()
  judgement=final_judgement(lines)
  return judgement

def ipc_cpc_check(lines):
  lines2=lines.splitlines()
  pc=[]
  ResSearch=0
  c=0
  for line in lines2:
    
    if(re.search('IPC' , line)):
      ResSearch = 1
    if(re.search('Indian Penal Code' , line)):
      ResSearch = 1
    if(re.search('CPC' , line)):
      ResSearch = 1
    if(re.search('Criminal Procedure Code' , line)):
      ResSearch = 1
    if(ResSearch):
      # c+=1
      # match=re.search(r'[[sS]\.\ \d+', line)
      # pc.append(match.group())
      split= line.split( )
      check=0
      for term in split:
        if check is 1:
          check = 0
          if (re.search(r'\d+', term)):
            match=re.search(r'\d+', term)
            pc.append('s. '+match.group()) 
        if (re.search(r'[sS]\.', term)):
          check = 1

      # print(line)
    ResSearch=0
  pc = list(dict.fromkeys(pc))
  return pc


def retrieve_penalCodes(filename):
  # filename='0603'
  start='Prior_Cases/'
  f=open(start+filename+'.txt','r')
  lines = f.read()
  codes = ipc_cpc_check(lines)
  return codes
"""Ignore the part below"""

# filename='0001'
# start='/content/fire2017data/FIRE2017-IRLeD-track-data/Task_2/Prior_Cases/prior_case_'
# f=open(start+filename+'.txt','r')
# lines = f.read()
# # alldates=all_dates(lines)   #first date gives the date of case
# # # citations=all_citations(lines)      #doesn't extract it
# # citation= citation_check(lines)
# # held = held_check(lines)
# # appellate_jurisdiction, appeal_no = aj_check(lines)
# # citatorInfo = citatorInfo_check(lines)
# # appealAllowedDismissed = appeal_allowedOrDismissed(lines)
# judge = judge_check(lines)
# # appellant = appellant_check(lines)
# # respondent = respondent_check(lines)
# # order_to_costs = order_to_costs_check(lines)
# print(judge)

# print(lines)

# print(alldates)